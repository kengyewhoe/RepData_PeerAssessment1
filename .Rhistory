library(ggplot2)
data <- read.csv(unz("activity.zip", "activity.csv"))
head(data)
summary(data)
dailySteps <- aggregate(data$steps,list(data$date), sum)
colnames(dailySteps) <- c("Date", "Steps")
head(dailySteps)
summary(dailySteps)
hist <- ggplot(dailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="purple",fill="magenta")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(dailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
hist
mean(dailySteps$Steps, na.rm = TRUE)
median(dailySteps$Steps, na.rm = TRUE)
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
h <- ggplot(stepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
# Counting the number of rows with NA
sum(is.na(data))
# Replacing missing values
NewData <- data
NewData$steps <- ifelse(is.na(NewData$steps), round(stepsper5$steps[match(NewData$interval, stepsper5$interval)],0),NewData$steps)
head(NewData)
newDailySteps <-aggregate()
View(dailySteps)
View(data)
View(NewData)
View(stepsper5)
newDailySteps <-aggregate(NewData$steps~list(NewData$date),sum)
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
View(newDailySteps)
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Steps","Date")
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="purple",fill="magenta")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(dailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Steps","Date")
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="purple",fill="magenta")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(newDailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
# Preparing the data
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Steps","Date")
# Plotting the Histogram
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="orange",fill="darkorange")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(newDailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
# Preparing the data
newDailySteps <-aggregate(newData$steps,list(NewData$date),sum)
# Preparing the data
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Steps","Date")
# Plotting the Histogram
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="orange",fill="darkorange")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(newDailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
# Preparing the data
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Date","Steps")
# Plotting the Histogram
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="orange",fill="darkorange")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(newDailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
# Preparing the data
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Date","Steps")
# Plotting the Histogram
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="orange",fill="darkorange")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(newDailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
# Summary of the New Data
summary(NewData)
# Preparing the data
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Date","Steps")
# Plotting the Histogram
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="orange",fill="darkorange")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(newDailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
# Summary of the New Data
summary(newDailySteps)
# Preparing the data
newDailySteps <-aggregate(NewData$steps,list(NewData$date),sum)
colnames(newDailySteps) <- c("Date","Steps")
# Plotting the Histogram
newHist <- ggplot(newDailySteps, aes(Steps)) +
geom_histogram(boundary = 0, binwidth=2500,col="orange",fill="darkorange")+
ggtitle("Histogram of Steps per Day") +
geom_vline(aes(xintercept=mean(newDailySteps$Steps, na.rm = TRUE)),
color="blue", linetype="dashed", size=1)+
xlab("Total Steps")+ ylab("Frequency") + scale_x_continuous(breaks = seq(0,25000,2500)) + scale_y_continuous(breaks= seq(0,20,2))
newHist
# Summary of the new data
summary(newDailySteps)
#Summary of the old data
summary(dailySteps)
NewData$date <- as.Date(NewData$date, format = "%Y-%m-%d")
# Formatting the data
NewData$date <- as.Date(NewData$date, format = "%Y-%m-%d")
# creating a column with weekdays name
NewData$weekday <- weekdays(NewData$date)
# Formatting the data
NewData$date <- as.Date(NewData$date, format = "%Y-%m-%d")
# creating a column with weekdays name
NewData$weekday <- weekdays(NewData$date)
NewData$DayType <- ifelse(NewData$weekday == "Saturday"| NewData$weekday == "Sunday", "Weekend", "Weekday")
# Formatting the data
NewData$date <- as.Date(NewData$date, format = "%Y-%m-%d")
# creating a column with weekdays name
NewData$weekday <- weekdays(NewData$date)
#NewData$DayType <- ifelse(NewData$weekday == "Saturday"| NewData$weekday == "Sunday", "Weekend", "Weekday")
# Formatting the data
NewData$date <- as.Date(NewData$date, format = "%Y-%m-%d")
# creating a column with weekdays name
NewData$weekday <- weekdays(NewData$date)
NewData$DayType <- ifelse(NewData$weekday == "Saturday"| NewData$weekday == "Sunday", "Weekend", "Weekday")
# Formatting the data
NewData$date <- as.Date(NewData$date, format = "%Y-%m-%d")
# creating a column with weekdays name
NewData$weekday <- weekdays(NewData$date)
NewData$DayType <- ifelse(NewData$weekday == "Saturday"| NewData$weekday == "Sunday", "Weekend", "Weekday")
head(NewData)
newstepsper5 <- aggregate(steps~interval,NewData,mean, na.action=na.omit)
head(newstepsper5)
h <- ggplot(newstepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
newstepsper5 <- aggregate(steps~interval+DayType,NewData,mean, na.action=na.omit)
head(newstepsper5)
h <- ggplot(newstepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
newstepsper5 <- aggregate(steps~interval+DayType,NewData,mean, na.action=na.omit)
head(newstepsper5)
h <- ggplot(newstepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))+facet_grid(DayType ~ .)
png("Histogram1.png")
plot(hist)
dev.off()
png("TimeSeries1.png")
plot(h)
dev.off()
png("TimeSeries1.png")
plot(ggplot(stepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25)))
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
h <- ggplot(stepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
h <- ggplot(stepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
h
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
h <- ggplot(stepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
dev.off()
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
ggplot(stepsper5, aes(interval, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
ggplot(stepsper5, aes(interval, steps))+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
timeplot<-ggplot(stepsper5, aes(interval, steps))+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
stepsper5 <- aggregate(steps~interval,data,mean, na.action=na.omit)
head(stepsper5)
timeplot<-ggplot(stepsper5, aes(interval, steps))+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))
timeplot
# Summary of the steps recorded at a time interval
summary(stepsper5$steps)
# Finding the time interval when steps is maximum
stepsper5$interval[which.max(stepsper5$steps)]
png("TimeSeries1.png")
plot(timeplot)
dev.off()
png("Histogram2.png")
plot(newHist)
dev.off()
newstepsper5 <- aggregate(steps~interval+DayType,NewData,mean, na.action=na.omit)
head(newstepsper5)
newTimePlot<-ggplot(newstepsper5, aes(interval, steps))+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))+facet_grid(DayType ~ .)
newstepsper5 <- aggregate(steps~interval+DayType,NewData,mean, na.action=na.omit)
head(newstepsper5)
newTimePlot<-ggplot(newstepsper5, aes(interval, steps))+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+scale_x_continuous(breaks = seq(0,2400,180)) + scale_y_continuous(breaks= seq(0,250,25))+facet_grid(DayType ~ .)
newTimePlot
png("TimeSeries2.png")
plot(newTimePlot)
dev.off()
